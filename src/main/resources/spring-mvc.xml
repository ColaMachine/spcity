<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/aop    
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd     
	http://www.springframework.org/schema/beans     
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd     
	http://www.springframework.org/schema/context     
	http://www.springframework.org/schema/context/spring-context-3.2.xsd     
	http://www.springframework.org/schema/mvc     
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd    
	http://www.springframework.org/schema/tx      
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">


	<mvc:view-controller path="/" view-name="index" />

	<!--<aop:aspectj-autoproxy proxy-target-class="true"/>
-->

	<!-- 启用MVC注解 -->
	<mvc:annotation-driven />
	<context:component-scan base-package="cola.machine.dao" />
	<context:component-scan base-package="cola.machine.service" />
	<context:component-scan base-package="cola.machine.action" />

	<context:component-scan base-package="core.log">
	</context:component-scan>
	<aop:aspectj-autoproxy />
	<mvc:view-controller path="/" view-name="index" />

	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <property name="defaultEncoding" value="UTF-8"/>  
        <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->  
        <property name="maxUploadSize" value="20000000"/>  
    </bean>  
      <!-- 

   	<task:scheduled-tasks>   
	        <task:scheduled ref="taskJob" method="job1" cron="0 * * * * ?"/>   
	</task:scheduled-tasks>  

	<context:component-scan base-package=" com.merchant.ad.task " />   -->
	
	<!-- 开启这个配置，spring才能识别@Scheduled注解   -->  
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>  
    <task:scheduler id="qbScheduler" pool-size="10"/>  
	  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   <property name="basePackage" value="com.opms.mapper"/> 
</bean> 
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>  
            </props>  
        </property>  
    </bean>  
	<!-- <context:component-scan base-package="com.merchant" /> -->

	<!-- <context:property-placeholder location="classpath:config.properties" 
		/> -->



	<!-- <context:component-scan base-package="com.merchant" /> -->

	<!-- <context:component-scan base-package="com.merchant.action"> <context:include-filter 
		type="annotation" expression="org.springframework.stereotype.Controller"/> 
		</context:component-scan> -->

	<!-- 指定使用注解方式配置,配置自动扫描的包名, base-package指定自己应用中控制器所在的包目录 <context:component-scan/> 
		扫描指定的包中的类上的注解，常用的注解有： @Controller 声明Action组件 @Service 声明Service组件 @Service("myMovieLister") 
		@Repository 声明Dao组件 @Component 泛指组件, 当不好归类时. @RequestMapping("/menu") 请求映射 
		@Resource用于注入，( j2ee提供的 ) 默认按名称装配， @Resource(name="beanName") @Autowired用于注入，(srping提供的) 
		默认按类型装配 @Transactional(rollbackFor={Exception.class}) 事务管理 @ResponseBody 
		@Scope("prototype")设定bean的作用域 -->

	<!-- spring的属性加载器，加载properties文件中的属性 -->

<!-- 	<bean id="configProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean> -->

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>

	<!-- 开启mvc注解 -->
	<mvc:annotation-driven validator="validator"
		conversion-service="conversion-service">
		<mvc:message-converters register-defaults="
			true ">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 静态资源不处理 -->
	<mvc:default-servlet-handler />

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--不设置则默认为classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="validatemessageSource" />
	</bean>
	<bean id="conversion-service"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	<bean id="validatemessageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:validatemessages" />
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>

	<!-- 启动spring mvc的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
	<!-- 配置信息转换，将用@responsebody注解的返回值转换为json返回前台，编码为utf-8 -->
	<!-- <property name="messageConverters"> <list> <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>application/json;charset=UTF-8</value> 
		</list> </property> </bean> </list> </property> </bean> -->


	<!-- 上传文件时需要用到的分解器，默认将编码转为utf-8 -->
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		<property name="defaultEncoding"> <value>UTF-8</value> </property> </bean> -->

	<!-- 资源文件 -->
	<mvc:resources location="/images/" mapping="/images/**" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/font/" mapping="/font/**" />
<!-- <mvc:resources location="/upload/" mapping="/upload/**" /> -->
	<!-- <mvc:interceptors> 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" 
		/> 如果不定义 mvc:mapping path 将拦截所有的URL请求 <bean class="com.merchant.Utils.AuthInterceptor"></bean> 
		</mvc:interceptors> -->


	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
 	<!-- <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/static/" />
		<property name="suffix" value=".html" />
	</bean>  -->






</beans>